Server listening at http://localhost:3001


  create internal order
[ { SKUId: 1, description: 'a product', price: 0.01, qty: 1 } ]
<<<<<<< HEAD
    ✔ create internal order (1479ms)
=======
    ✔ create internal order (1463ms)
>>>>>>> delivery_changes
[ { SKUId: 1, description: 'a product', price: -0.01, qty: 1 } ]
    ✔ create internal order - UNPROCESSABLE

  get internal order by id
[ { SKUId: 1, description: 'a product', price: 0.01, qty: 1 } ]
[ { SKUId: 1, description: 'a product', price: 0.01, qty: 1 } ]
    ✔ get internal order by id
    ✔ get internal order by id
    ✔ get internal order by id - NOT FOUND
    ✔ get internal order by id - UNPROCESSABLE ENTITY

  get internal orders
[ { SKUId: 1, description: 'a product', price: 0.01, qty: 1 } ]
[ { SKUId: 1, description: 'a product', price: 0.01, qty: 1 } ]
    ✔ get internal orders
    ✔ get internal orders

  get internal orders issued
[ { SKUId: 1, description: 'a product', price: 0.01, qty: 1 } ]
[ { SKUId: 1, description: 'a product', price: 0.01, qty: 1 } ]
    ✔ get internal orders issued
    ✔ get internal orders issued

  get internal orders accepted
[ { SKUId: 1, description: 'a product', price: 0.01, qty: 1 } ]
[ { SKUId: 1, description: 'a product', price: 0.01, qty: 1 } ]
    ✔ get internal orders accepted

  modify internal order state
[ { SKUId: 1, description: 'a product', price: 0.01, qty: 1 } ]
    ✔ modify internal order state accpeted
    ✔ modify internal order state - NOT FOUND
    ✔ modify internal order state - NOT FOUND
    ✔ modify internal order state completed

  delete internal order
[ { SKUId: 1, description: 'a product', price: 0.01, qty: 1 } ]
    ✔ delete internal order

  API: GET /api/positions
    ✔ [200] OK

  API: POST /api/position
    ✔ [201] Created
    ✔ [422] Unprocessable Entity (constraints on positionID failed)
    ✔ [422] Unprocessable Entity (constraints on maxWeight/maxVolume failed)
    ✔ [422] Unprocessable Entity (missing parameters)

  API: PUT /api/position/:positionID
    ✔ [200] OK
    ✔ [422] Unprocessable Entity (constraints on maxWeight/maxVolume failed)
    ✔ [404] Not Found (positionID non existing in DB)

  PUT /api/position/:positionID/changeID
    ✔ [200] OK
    ✔ [422] Unprocessable Entity (constraints on newPositionID failed)
    ✔ [404] Not Found (positionID non existing in DB)

  DELETE /api/position/:positionID
    ✔ [204] No Content
    ✔ [422] Unprocessable Entity (constraints on positionID failed)

  API: GET /api/skuitems
    ✔ [200] OK

  API: GET /api/skuitems/sku/:id
    ✔ [200] OK
    ✔ [422] Unprocessable Entity (id constraint failed)

  API: GET /api/skuitems/:rfid
<<<<<<< HEAD
    1) [200] OK
=======
{
  id: 222,
  description: 'TestDescription',
  weight: 50,
  volume: 50,
  notes: 'TestNote',
  position: null,
  price: 10.99,
  availableQuantity: 1
}
    ✔ [200] OK
>>>>>>> delivery_changes
    ✔ [404] Not Found (rfid non existing)
    ✔ [422] Unprocessable Entity (id constraint failed)

  API: POST /api/skuitem
<<<<<<< HEAD
    ✔ [201] Created
=======
{
  id: 555,
  description: 'TestDescription',
  weight: 50,
  volume: 50,
  notes: 'TestNote',
  position: null,
  price: 10.99,
  availableQuantity: 1
}
    ✔ [201] Created
undefined
>>>>>>> delivery_changes
    ✔ [404] Not Found (SKUid non existing)
    ✔ [422] Unprocessable Entity (body parameters constraints failed)

  API: PUT /api/skuitems/:rfid
<<<<<<< HEAD
=======
{
  id: 777,
  description: 'TestDescription',
  weight: 50,
  volume: 50,
  notes: 'TestNote',
  position: null,
  price: 10.99,
  availableQuantity: 1
}
>>>>>>> delivery_changes
    ✔ [200] OK
    ✔ [404] Not Found (rfid non existing)
    ✔ [422] Unprocessable Entity (body parameters constraints failed)
    ✔ [422] Unprocessable Entity (rfid constraints failed)

  API: DELETE /api/skuitems/:rfid
<<<<<<< HEAD
=======
undefined
>>>>>>> delivery_changes
    ✔ [204] No Content
    ✔ [422] Unprocessable Entity

  API: GET /api/skus
    ✔ [200] OK

  API: GET /api/skus/:id
    ✔ [200] OK
    ✔ [404] Not Found (id non existing)
    ✔ [422] Unprocessable Entity (id constraints failed)

  API: POST /api/sku
    ✔ [201] Created
    ✔ [422] Unprocessable Entity (body constraints failed)

  API: PUT /api/sku/:id
    ✔ [200] OK
    ✔ [404] Not Found (id non existing)
    ✔ [422] Unprocessable Entity (body constraints failed)

  API: PUT /api/sku/:id/position
    ✔ [200] OK
    ✔ [404] Not Found (id non existing)
    ✔ [404] Not Found (position non existing)
    ✔ [422] Unprocessable Entity (body constraints failed)

  API: DELETE /api/skus/:id
    ✔ 204 No Content

  new test descriptor
<<<<<<< HEAD
=======
{
  id: 1,
  description: 'newSku',
  weight: 100,
  volume: 50,
  notes: 'first SKU',
  position: null,
  price: 10.99,
  availableQuantity: 50
}
>>>>>>> delivery_changes
    ✔ 201 return
    ✔ empty body
    ✔ wrong idsku type
    ✔ skuid doesn't exist

  get test descriptor
<<<<<<< HEAD
    2) "before all" hook for "200 return"

  get test descriptor by id
    3) "before all" hook for "200 return"
=======
{
  id: 1,
  description: 'newSku',
  weight: 100,
  volume: 50,
  notes: 'first SKU',
  position: null,
  price: 10.99,
  availableQuantity: 50
}
    ✔ 200 return

  get test descriptor by id
{
  id: 1,
  description: 'newSku',
  weight: 100,
  volume: 50,
  notes: 'first SKU',
  position: null,
  price: 10.99,
  availableQuantity: 50
}
    ✔ 200 return
    ✔ id non existing)
    ✔ id constraint failed
>>>>>>> delivery_changes

  modify test descriptor
    ✔ 200 return
    ✔ id doesn't exist
    ✔ body format is wrong
<<<<<<< HEAD

  delete test descriptor
    4) "before all" hook for "204 No Content"

  new test result
=======
undefined
undefined

  delete test descriptor
{
  id: 1,
  description: 'newSku',
  weight: 100,
  volume: 50,
  notes: 'first SKU',
  position: null,
  price: 10.99,
  availableQuantity: 50
}
    ✔ 204 No Content

  new test result
{
  id: 1,
  description: 'newSku',
  weight: 100,
  volume: 50,
  notes: 'first SKU',
  position: null,
  price: 10.99,
  availableQuantity: 50
}
>>>>>>> delivery_changes
    ✔ 201 return
    ✔ empty body
    ✔ wrong rfid length
    ✔ rfid doesn't exist
    ✔ id doesn't exist

  get test result
<<<<<<< HEAD
=======
{
  id: 1,
  description: 'newSku',
  weight: 100,
  volume: 50,
  notes: 'first SKU',
  position: null,
  price: 10.99,
  availableQuantity: 50
}
>>>>>>> delivery_changes
    ✔ 200 return
    ✔ rfid short

  get test result by id
<<<<<<< HEAD
=======
{
  id: 1,
  description: 'newSku',
  weight: 100,
  volume: 50,
  notes: 'first SKU',
  position: null,
  price: 10.99,
  availableQuantity: 50
}
>>>>>>> delivery_changes
    ✔ 200 return
    ✔ id non existing)
    ✔ rfid non existing)
    ✔ id constraint failed
    ✔ rfid constraint failed

  modify test result
<<<<<<< HEAD
=======
{
  id: 1,
  description: 'newSku',
  weight: 100,
  volume: 50,
  notes: 'first SKU',
  position: null,
  price: 10.99,
  availableQuantity: 50
}
>>>>>>> delivery_changes
    ✔ 200 return
    ✔ id doesn't exist
    ✔ body format is wrong

  delete test result
<<<<<<< HEAD
    ✔ 204 No Content

  new item
=======
{
  id: 1,
  description: 'newSku',
  weight: 100,
  volume: 50,
  notes: 'first SKU',
  position: null,
  price: 10.99,
  availableQuantity: 50
}
    ✔ 204 No Content

  new item
{
  id: 1,
  description: 'newSku',
  weight: 100,
  volume: 50,
  notes: 'first SKU',
  position: null,
  price: 10.99,
  availableQuantity: 50
}
>>>>>>> delivery_changes
    ✔ 201 return
    ✔ empty body
    ✔ wrong price type
    ✔ skuid doesn't exist

  get item
<<<<<<< HEAD
    ✔ 200 return

  get item by id
=======
{
  id: 1,
  description: 'newSku',
  weight: 100,
  volume: 50,
  notes: 'first SKU',
  position: null,
  price: 10.99,
  availableQuantity: 50
}
    ✔ 200 return

  get item by id and sup id
{
  id: 1,
  description: 'newSku',
  weight: 100,
  volume: 50,
  notes: 'first SKU',
  position: null,
  price: 10.99,
  availableQuantity: 50
}
>>>>>>> delivery_changes
    ✔ 200 return
    ✔ id non existing)
    ✔ id constraint failed

  modify item
    ✔ 200 return
    ✔ id doesn't exist
    ✔ body format is wrong

  delete item
<<<<<<< HEAD
    ✔ 204 No Content

  get restock order by id
{"issueDate":"2022/05/12 17:44","supplierId":7,"products":[{"SKUId":1,"description":"a product","price":0.01,"qty":1}]}
{"issueDate":"2022/05/12 17:44","supplierId":7,"products":[{"SKUId":1,"description":"a product","price":0.01,"qty":1}]}
    ✔ get restock order by id
    ✔ get restock order by id - NOT FOUND
    ✔ get restock order by id - UNPROCESSABLE ENTITY

  create restock order
{"issueDate":"2022/05/12 17:44","supplierId":7,"products":[{"SKUId":1,"description":"a product","price":0.01,"qty":1}]}
    ✔ create restock order
    ✔ create restock order - UNPROCESSABLE ENTITY

  get restock orders
{"issueDate":"2022/05/12 17:44","supplierId":7,"products":[{"SKUId":1,"description":"a product","price":0.01,"qty":1}]}
{"issueDate":"2022/05/12 17:44","supplierId":7,"products":[{"SKUId":1,"description":"a product","price":0.01,"qty":1}]}
    ✔ get restock orders

  get restock orders issued
{"issueDate":"2022/05/12 17:44","supplierId":7,"products":[{"SKUId":1,"description":"a product","price":0.01,"qty":1}]}
{"issueDate":"2022/05/12 17:44","supplierId":7,"products":[{"SKUId":1,"description":"a product","price":0.01,"qty":1}]}
    ✔ get restock orders issued

  modify restock order state
{"issueDate":"2022/05/12 17:44","supplierId":7,"products":[{"SKUId":1,"description":"a product","price":0.01,"qty":1}]}
    ✔ modify restock order state
    ✔ modify restock order state - NOT FOUND
    ✔ modify restock order state

  add transport note
{"issueDate":"2022/05/12 17:44","supplierId":7,"products":[{"SKUId":1,"description":"a product","price":0.01,"qty":1}]}
    ✔ add transport note
    ✔ add transport note - NOT FOUND
    ✔ add transport note - UNPROCESSABLE

  set skuItems
{"issueDate":"2022/05/12 17:44","supplierId":7,"products":[{"SKUId":1,"description":"a product","price":0.01,"qty":1}]}
{ SKUId: 1, rfid: '12345678901234567890123456789016' }
    ✔ set skuItems
{ SKUId: 1, rfid: '12345678901234567890123456789016' }
    ✔ set skuItems-NOT FOUND
{ SKUId: 1, rfid: '12345678901234567890123456789016' }
    ✔ set skuItems- UNPROCESSABLE

  get return items
{"issueDate":"2022/05/12 17:44","supplierId":7,"products":[{"SKUId":1,"description":"a product","price":0.01,"qty":1}]}
    ✔ get return items - NOT FOUND
    ✔ get return items
    ✔ get return items - UNPROCESSABLE

  delete restock order
{"issueDate":"2022/05/12 17:44","supplierId":7,"products":[{"SKUId":1,"description":"a product","price":0.01,"qty":1}]}
=======
{
  id: 1,
  description: 'newSku',
  weight: 100,
  volume: 50,
  notes: 'first SKU',
  position: null,
  price: 10.99,
  availableQuantity: 50
}
    ✔ 204 No Content

  get restock order by id
    ✔ get restock order by id
    ✔ get restock order by id - NOT FOUND
    ✔ get restock order by id - UNPROCESSABLE ENTITY
DELETED RO
DELETED RO

  create restock order
    ✔ create restock order
    ✔ create restock order - UNPROCESSABLE ENTITY
DELETED RO

  get restock orders
    ✔ get restock orders
DELETED RO
DELETED RO

  get restock orders issued
    ✔ get restock orders issued
DELETED RO
DELETED RO

  modify restock order state
    ✔ modify restock order state
    ✔ modify restock order state - NOT FOUND
    ✔ modify restock order state
DELETED RO

  add transport note
    ✔ add transport note
    ✔ add transport note - NOT FOUND
    ✔ add transport note - UNPROCESSABLE
DELETED RO

  set skuItems
{ SKUId: 1, itemId: 1, rfid: '12345678901234567890123456789016' }
    ✔ set skuItems
{ SKUId: 1, itemId: 1, rfid: '12345678901234567890123456789016' }
    ✔ set skuItems-NOT FOUND
{ SKUId: 1, itemId: 1, rfid: '12345678901234567890123456789016' }
    ✔ set skuItems- UNPROCESSABLE
DELETED RO

  get return items
    ✔ get return items - NOT FOUND
    ✔ get return items
    ✔ get return items - UNPROCESSABLE
DELETED RO

  delete restock order
DELETED RO
>>>>>>> delivery_changes
    ✔ delete restock order
    ✔ delete restock order - UNPROCESSABLE

  create return order
    ✔ create return order
    ✔ create return order
<<<<<<< HEAD

  get return orders
    ✔ get return orders
=======
DELETED RO
[
  {
    id: 1,
    returnDate: '2021/11/29 09:33',
    restockOrderId: 1,
    products: [ [Object], [Object] ]
  }
]

  get return orders
    ✔ get return orders
DELETED RO
>>>>>>> delivery_changes

  get return order by id
    ✔ get return order by id
    ✔ get return order by id- not found
    ✔ get return order by id- unprocessable
<<<<<<< HEAD

  delete return order
=======
DELETED RO

  delete return order
DELETED RO
>>>>>>> delivery_changes
    ✔ delete return order
    ✔ delete return order
    ✔ delete return order

  get users
    ✔ retrieve users
    ✔ not empty body

  get suppliers
    ✔ retrieve users
    ✔ not empty body

  get user
<<<<<<< HEAD
    5) "before all" hook for "getting user data from the system"

  new user
    ✔ user created (58ms)
=======
    ✔ getting user data from the system (59ms)
    ✔ empty body
    ✔ bad username format
    ✔ bad password format
    ✔ not found: wrong username
    ✔ not found: wrong password (59ms)

  new user
    ✔ user created (59ms)
>>>>>>> delivery_changes
    ✔ empty body
    ✔ wrong username format
    ✔ password too short
    ✔ Types administrator/manager cannot be registered
    ✔ user already exists

  modify permissions
    ✔ edited
    ✔ empty body
    ✔ cannot modify manager rights
    ✔ cannot upgrade to manager
    ✔ is not email
    ✔ user not found

  delete user
    ✔ wrong user
    ✔ trying to delete a manager
    ✔ empty params
    ✔ deleted


<<<<<<< HEAD
  142 passing (2s)
  5 failing

  1) API: GET /api/skuitems/:rfid
       [200] OK:
     AssertionError: expected { …(4) } to be an array
      at /Users/davidearcolini/Desktop/PoliTo_CyberSecurity/Courses/Software_Engineering/Exam_Project/SoftEng_garbageCollector/code/server/test/testSKUitemRouter.js:357:41
      at processTicksAndRejections (node:internal/process/task_queues:96:5)
      at async Context.<anonymous> (test/testSKUitemRouter.js:353:9)

  2) get test descriptor
       "before all" hook for "200 return":

      AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 201 but got 404
      + expected - actual

      -404
      +201
      
      at /Users/davidearcolini/Desktop/PoliTo_CyberSecurity/Courses/Software_Engineering/Exam_Project/SoftEng_garbageCollector/code/server/test/testTestDescriptorRouter.js:130:29
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)
      at async Context.<anonymous> (test/testTestDescriptorRouter.js:129:11)

  3) get test descriptor by id
       "before all" hook for "200 return":

      AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 201 but got 404
      + expected - actual

      -404
      +201
      
      at /Users/davidearcolini/Desktop/PoliTo_CyberSecurity/Courses/Software_Engineering/Exam_Project/SoftEng_garbageCollector/code/server/test/testTestDescriptorRouter.js:172:29
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)
      at async Context.<anonymous> (test/testTestDescriptorRouter.js:171:11)

  4) delete test descriptor
       "before all" hook for "204 No Content":

      AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 201 but got 404
      + expected - actual

      -404
      +201
      
      at /Users/davidearcolini/Desktop/PoliTo_CyberSecurity/Courses/Software_Engineering/Exam_Project/SoftEng_garbageCollector/code/server/test/testTestDescriptorRouter.js:266:29
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (node:internal/process/task_queues:96:5)
      at async Context.<anonymous> (test/testTestDescriptorRouter.js:265:11)

  5) get user
       "before all" hook for "getting user data from the system":
     TypeError: dao.deleteAllUsers is not a function
      at Context.<anonymous> (test/testUserRouter.js:49:19)
      at processImmediate (node:internal/timers:466:21)


=======
  154 passing (2s)
>>>>>>> delivery_changes

